serialization: add post_extract method to adapter_builder

From: Aaron Jones <aaron@vexing.codes>


---
 include/jsonv/serialization_builder.hpp         |   69 ++++++++++++++++++-----
 src/jsonv-tests/serialization_builder_tests.cpp |   53 ++++++++++++++++++
 2 files changed, 108 insertions(+), 14 deletions(-)

diff --git a/include/jsonv/serialization_builder.hpp b/include/jsonv/serialization_builder.hpp
index ae0bd3f..b172647 100644
--- a/include/jsonv/serialization_builder.hpp
+++ b/include/jsonv/serialization_builder.hpp
@@ -382,6 +382,14 @@ namespace jsonv
  *
  *  Call the given \a perform function during the \c extract operation, but before performing any extraction. This can
  *  be called multiple times -- all functions will be called in the order they are provided.
+ *
+ *  \paragraph serialization_builder_dsl_ref_type_level_post_extract post_extract
+ *  
+ *   - <tt>post_extract(std::function&lt;T (const extraction_context& context, T&& out)&gt; perform)</tt>
+ *  
+ *  Call the given \a perform function after the \c extract operation. All functions will be called in the order they
+ *  are provided. This allows validation methods to be called on the extracted object as part of extraction.
+ *  Postprocessing functions are allowed to mutate the extracted object.
  *  
  *  \paragraph serialization_builder_dsl_ref_type_level_default_on_null type_default_on_null
  *  
@@ -656,9 +664,11 @@ public:
                                               void (T::*mutate)(TMember&&)
                                              );
     
-    adapter_builder<T>& pre_extract(std::function<void (const extraction_context&, const value& from)> perform);
-    
-    adapter_builder<T>& on_extract_extra_keys(std::function<void (const extraction_context&, const value& from, std::set<std::string> extra_keys)> handler);
+    adapter_builder<T>& pre_extract(typename adapter_builder<T>::pre_extract_func perform);
+
+    adapter_builder<T>& post_extract(typename adapter_builder<T>::post_extract_func perform);
+
+    adapter_builder<T>& on_extract_extra_keys(typename adapter_builder<T>::extra_keys_func handler);
     
 protected:
     adapter_builder<T>* owner;
@@ -938,6 +948,11 @@ template <typename T>
 class adapter_builder :
         public detail::formats_builder_dsl
 {
+public:
+    using pre_extract_func  = std::function<void (const extraction_context&, const value&)>;
+    using post_extract_func = std::function<T (const extraction_context&, T&&)>;
+    using extra_keys_func   = std::function<void (const extraction_context&, const value&, std::set<std::string>)>;
+
 public:
     template <typename F>
     explicit adapter_builder(formats_builder* owner, F&& f) :
@@ -1035,11 +1050,11 @@ public:
                               );
     }
     
-    adapter_builder<T>& pre_extract(std::function<void (const extraction_context&, const value& from)> perform)
+    adapter_builder<T>& pre_extract(pre_extract_func perform)
     {
         if (_adapter->_pre_extract)
         {
-            std::function<void (const extraction_context&, const value&)> old_perform = std::move(_adapter->_pre_extract);
+            pre_extract_func old_perform = std::move(_adapter->_pre_extract);
             _adapter->_pre_extract = [old_perform, perform] (const extraction_context& context, const value& from)
                                      {
                                          old_perform(context, from);
@@ -1052,8 +1067,25 @@ public:
         }
         return *this;
     }
+
+    adapter_builder<T>& post_extract(post_extract_func perform)
+    {
+        if (_adapter->_post_extract)
+        {
+            post_extract_func old_perform = std::move(_adapter->_post_extract);
+            _adapter->_post_extract = [old_perform, perform] (const extraction_context& context, T&& out)
+                                     {
+                                         return perform(context, old_perform(context, std::move(out)));
+                                     };
+        }
+        else
+        {
+            _adapter->_post_extract = std::move(perform);
+        }
+        return *this;
+    }
     
-    adapter_builder<T>& on_extract_extra_keys(std::function<void (const extraction_context&, const value& from, std::set<std::string> extra_keys)> handler)
+    adapter_builder<T>& on_extract_extra_keys(extra_keys_func handler)
     {
         adapter_impl* adapter = _adapter;
         return pre_extract([adapter, handler] (const extraction_context& context, const value& from)
@@ -1096,6 +1128,10 @@ private:
             T out;
             for (const auto& member : _members)
                 member->mutate(context, from, out);
+
+            if (_post_extract)
+                out = _post_extract(context, std::move(out));
+
             return out;
         }
         
@@ -1107,10 +1143,11 @@ private:
             return out;
         }
         
-        std::deque<std::unique_ptr<detail::member_adapter<T>>>             _members;
-        std::function<void (const extraction_context&, const value& from)> _pre_extract;
-        std::function<T (const extraction_context&)>                       _create_default;
-        bool                                                               _default_on_null;
+        std::deque<std::unique_ptr<detail::member_adapter<T>>> _members;
+        pre_extract_func                                       _pre_extract;
+        post_extract_func                                      _post_extract;
+        std::function<T (const extraction_context&)>           _create_default;
+        bool                                                   _default_on_null;
     };
     
 private:
@@ -1501,15 +1538,19 @@ adapter_builder_dsl<T>::member(std::string name,
 }
 
 template <typename T>
-adapter_builder<T>& adapter_builder_dsl<T>
-::pre_extract(std::function<void (const extraction_context&, const value& from)> perform)
+adapter_builder<T>& adapter_builder_dsl<T>::pre_extract(typename adapter_builder<T>::pre_extract_func perform)
 {
     return owner->pre_extract(std::move(perform));
 }
 
 template <typename T>
-adapter_builder<T>& adapter_builder_dsl<T>
-::on_extract_extra_keys(std::function<void (const extraction_context&, const value& from, std::set<std::string> extra_keys)> handler)
+adapter_builder<T>& adapter_builder_dsl<T>::post_extract(typename adapter_builder<T>::post_extract_func perform)
+{
+    return owner->post_extract(std::move(perform));
+}
+
+template <typename T>
+adapter_builder<T>& adapter_builder_dsl<T>::on_extract_extra_keys(typename adapter_builder<T>::extra_keys_func handler)
 {
     return owner->on_extract_extra_keys(std::move(handler));
 }
diff --git a/src/jsonv-tests/serialization_builder_tests.cpp b/src/jsonv-tests/serialization_builder_tests.cpp
index 835d9a6..5215e3c 100644
--- a/src/jsonv-tests/serialization_builder_tests.cpp
+++ b/src/jsonv-tests/serialization_builder_tests.cpp
@@ -195,6 +195,59 @@ TEST(serialization_builder_extract_extra_keys)
     ensure(extra_keys == std::set<std::string>({ "extra1", "extra2" }));
 }
 
+TEST(serialization_builder_post_extract_single)
+{
+    auto post_extract_handler = [] (const extraction_context&, person&& p) -> person
+                              {
+                                  p.age++;
+                                  return p;
+                              };
+
+    formats fmt = formats_builder()
+                    .type<person>()
+                        .post_extract(post_extract_handler)
+                        .member("firstname", &person::firstname)
+                        .member("lastname",  &person::lastname)
+                        .member("age",       &person::age)
+                    .compose_checked(formats::defaults())
+                ;
+
+    person p("Bob", "Builder", 29);
+    auto encoded = to_json(p, fmt);
+    person q = extract<person>(encoded, fmt);
+    ensure_eq(person("Bob", "Builder", 30), q);
+}
+
+TEST(serialization_builder_post_extract_multi)
+{
+    auto post_extract_handler_1 = [] (const extraction_context&, person&& p)
+                                {
+                                    p.age++;
+                                    return p;
+                                };
+
+    auto post_extract_handler_2 = [] (const extraction_context&, person&& p)
+                                {
+                                    p.lastname = "Mc" + p.lastname;
+                                    return p;
+                                };
+
+    formats fmt = formats_builder()
+                    .type<person>()
+                        .post_extract(post_extract_handler_1)
+                        .post_extract(post_extract_handler_2)
+                        .member("firstname", &person::firstname)
+                        .member("lastname",  &person::lastname)
+                        .member("age",       &person::age)
+                    .compose_checked(formats::defaults())
+                ;
+
+    person p("Bob", "Builder", 29);
+    auto encoded = to_json(p, fmt);
+    person q = extract<person>(encoded, fmt);
+    ensure_eq(person("Bob", "McBuilder", 30), q);
+}
+
 TEST(serialization_builder_defaults)
 {
     formats fmt = formats_builder()
